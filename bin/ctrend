#!/usr/bin/env ruby
#
# Collects the complexity trend for a git repo
#

require 'json'
require 'ruby_parser'

class Complexity
  def initialize(path, source_code)
    @path = path
    @comp = 0
    @requires = 1
    @source_code = source_code
    @method_comps = []
  end

  def calc
    ast = RubyParser.for_current_ruby.parse(@source_code)
    @comp = process_ast(ast)
    @comp * @requires
  end

  def report
    maxcc = @method_comps.max || @comp
    meancc = @method_comps.length > 0 ? @comp.to_f / @method_comps.length : @comp
    {
      filename: @path,
      complexity: {
        sumcc: @comp,
        maxcc: maxcc,
        meancc: meancc,
        esumcc: @requires * @comp,
        emaxcc: @requires * maxcc,
        emeancc: @requires * meancc
      }
    }
  end

  private

  def process_ast(node)
    return 0 unless has_children?(node)
    if is_method?(node)
      my = 1 + process_children(node)
      @method_comps << my
      my
    else
      @requires = @requires + 1 if is_require?(node)
      comp = process_children(node)
      comp = comp + 1 if is_branch_point?(node)
      comp
    end
  end

  def has_children?(node)
    node.is_a?(Array) && node[0] != :lit
  end

  def is_branch_point?(node)
    complex_nodes.include?(node[0])
  end

  def is_method?(node)
    [:defn, :defs].include?(node[0])
  end

  def is_require?(node)
    node[0] == :call && node[2] == :require
  end

  def process_children(node)
    return 0 unless node && node.size > 1
    node[1..-1].select {|n| n }.map {|n| process_ast(n) }.inject(:+)
  end

  def complex_nodes
    [
      :defn, :defs,
      :if, :case, :when,
      :and, :or,
      :for, :while, :until,
      :rescue, :ensure,
      :iter
    ]
  end

end

def git_commits
  lines = `git log --pretty=%h/%aN/%ci`.split("\n")
  lines.map { |line|
    ref, author, date = line.split('/')
    {
      ref: ref,
      date: date,
      author: author
    }
  }
end

glob = ARGV[0]

commits = git_commits.reverse

commits.each do |commit|
  `git checkout #{commit[:ref]} >/dev/null 2>&1`
  files = Dir[glob]
  report = []
  files.each do |path|
    source_code = IO.readlines(path).join
    comp = Complexity.new(path, source_code)
    comp.calc
    report << comp.report[:complexity][:emaxcc]
  end
  comp = (report.max).round(3)
  commit[:complexity] = comp
end

puts commits.to_json
