#!/usr/bin/env ruby
#
# Collects the complexity metrics for a git repo
#
# Usage: $0 output_folder files
#

require 'date'
require 'json'
require 'ruby_parser'

DELTA_CUTOFF_DAYS = 365

#- - - Helpers - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

class Complexity
  def initialize(path, source_code)
    @path = path
    @comp = 0
    @requires = 1
    @source_code = source_code
    @method_comps = []
  end

  def calc
    ast = RubyParser.for_current_ruby.parse(@source_code)
    @comp = process_ast(ast)
    @comp * @requires
  end

  def churn(path)
    `git log --pretty=%h #{path} | wc -l`.to_i
  end

  def report
    maxcc = @method_comps.max || @comp
    meancc = @method_comps.length > 0 ? @comp.to_f / @method_comps.length : @comp
    {
      filename: @path,
      churn: churn(@path),
      complexity: {
        esumcc: @requires * @comp,
        emaxcc: @requires * maxcc,
        emeancc: @requires * meancc
      }
    }
  end

  private

  def process_ast(node)
    return 0 unless has_children?(node)
    if is_method?(node)
      my = 1 + process_children(node)
      @method_comps << my
      my
    else
      @requires = @requires + 1 if is_require?(node)
      comp = process_children(node)
      comp = comp + 1 if is_branch_point?(node)
      comp
    end
  end

  def has_children?(node)
    node.is_a?(Array) && node[0] != :lit
  end

  def is_branch_point?(node)
    complex_nodes.include?(node[0])
  end

  def is_method?(node)
    [:defn, :defs].include?(node[0])
  end

  def is_require?(node)
    node[0] == :call && node[2] == :require
  end

  def process_children(node)
    return 0 unless node && node.size > 1
    node[1..-1].select {|n| n }.map {|n| process_ast(n) }.inject(:+)
  end

  def complex_nodes
    [
      :defn, :defs,
      :if, :case, :when,
      :and, :or,
      :for, :while, :until,
      :rescue, :ensure,
      :iter
    ]
  end

end

def all_commits
  raw_log = `git log --pretty="%h/%aN/%ci/%s" --shortstat`
  lines = raw_log.split("\n")
  result = []
  (0..(lines.length-1)).each do |i|
    if lines[i].empty?
      fields = lines[i-1].split('/')
      count = lines[i+1].to_i
      result << {
        ref: fields[0],
        author: fields[1],
        date: fields[2],
        comment: fields[3..-1].join,
        num_files_touched: count
      }
    end
  end
  result.reverse
end

def complexity_report(path)
  source_code = IO.readlines(path).join
  comp = Complexity.new(path, source_code)
  comp.calc
  comp.report
end

def update_with_complexity(commits, files_glob)
  commits.each do |commit|
    `git checkout #{commit[:ref]} >/dev/null 2>&1`
    $stderr.print '.'
    files = Dir[files_glob]
    report = files.map {|path| complexity_report(path) }
    commit[:complexity] = {
      sumesumcc: report.map {|e| e[:complexity][:esumcc] }.inject(:+),
      maxesumcc: report.map {|e| e[:complexity][:esumcc] }.max,
      maxemaxcc: report.map {|e| e[:complexity][:emaxcc] }.max,
      maxemeancc: report.map {|e| e[:complexity][:emeancc] }.max.round(2)
    }
  end
end

def group_by_author(commits)
  commits.group_by {|commit| commit[:author] }.map do |author, commits|
    { author: author, commits: commits }
  end
end

def select_recent_commits(commits)
  cutoff = DateTime.now - DELTA_CUTOFF_DAYS
  recent = commits.select {|c| DateTime.parse(c[:date]) > cutoff }
  recent.each_with_index do |commit, i|
    delta = commit[:complexity][:sumesumcc] - (i > 0 ? recent[i-1][:complexity][:sumesumcc] : 0)
    commit[:complexity][:delta_sumesumcc] = delta
  end

  group_by_author(recent[1..-1])
end

def files_report(files_glob)
  Dir[files_glob].map {|path| complexity_report(path) }
end

def reset_current_repo
  `git checkout master`
end

def prepare_output_folder(folder)
  `mkdir -p #{folder}`
end

def write_json_file(path, data)
  File.open(path, 'w') {|f| f.puts data.to_json }
end

#- - - Main program - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if ARGV.length != 2
  $stderr.puts "Usage: #{File.basename($0)} output_folder files_glob"
  exit 1
end

outdir = ARGV[0]
files_glob = ARGV[1]

COMMITS_FILE_PATH = "#{outdir}/commits.json"
CURRENT_FILES_PATH = "#{outdir}/current_files.json"
RECENT_COMMITS_PATH = "#{outdir}/recent_commits_by_author.json"

reset_current_repo
prepare_output_folder(outdir)

write_json_file(CURRENT_FILES_PATH, files_report(files_glob))

commits = all_commits
update_with_complexity(commits, files_glob)
write_json_file(COMMITS_FILE_PATH, commits)

recent = select_recent_commits(commits)
write_json_file(RECENT_COMMITS_PATH, recent)

$stderr.puts ''
exit 0
