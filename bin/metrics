#!/usr/bin/env ruby
#
# Collects the complexity metrics for a git repo
#
# Usage: $0 output_folder files
#

require 'date'
require 'json'

BIN = File.dirname($0)
DELTA_CUTOFF_DAYS = 365

#- - - Helpers - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

def churn(path)
  `git log --pretty=%h #{path} | wc -l`.to_i
end

def all_commits
  raw_log = `git log --pretty="%h/%aN/%ci/%s" --shortstat`
  lines = raw_log.split("\n")
  result = []
  (0..(lines.length-1)).each do |i|
    if lines[i].empty?
      fields = lines[i-1].split('/')
      count = lines[i+1].to_i
      result << {
        ref: fields[0],
        author: fields[1],
        date: fields[2],
        comment: fields[3..-1].join,
        num_files_touched: count
      }
    end
  end
  result.reverse
end

def complexity_report(path)
  json =  case path
          when /.*\.rb$/
            `#{BIN}/rubycc #{path}`
          when /.*\.java$/
            `#{BIN}/javacc #{path}`
          end
  result = JSON.parse(json)
  result[:churn] = churn(path)
  result
end

def update_with_complexity(commits, files_glob)
  commits.each do |commit|
    `git checkout #{commit[:ref]} >/dev/null 2>&1`
    $stderr.print '.'
    files = Dir[files_glob]
    report = files.map {|path| complexity_report(path) }
    if report.empty?
      commit[:complexity] = {
        sumesumcc: 0,
        maxesumcc: 0,
        maxemaxcc: 0,
        maxemeancc: 0.0,
        meanesumcc: 0.0
      }
    else
      commit[:complexity] = {
        sumesumcc: report.map {|e| e['complexity']['esumcc'] }.inject(:+),
        maxesumcc: report.map {|e| e['complexity']['esumcc'] }.max,
        maxemaxcc: report.map {|e| e['complexity']['emaxcc'] }.max,
        maxemeancc: report.map {|e| e['complexity']['emeancc'] }.max.round(2),
        meanesumcc: mean_of(report.map {|e| e['complexity']['esumcc']}).round(2)
      }
    end
  end
end

def mean_of(nums)
  nums.inject(:+).to_f / nums.length
end

def group_by_author(commits)
  commits.group_by {|commit| commit[:author] }.map do |author, commits|
    { author: author, commits: commits }
  end
end

def select_recent_commits(commits)
  cutoff = DateTime.now - DELTA_CUTOFF_DAYS
  recent = commits.select {|c| DateTime.parse(c[:date]) > cutoff }
  recent.each_with_index do |commit, i|
    delta = commit[:complexity][:sumesumcc] - (i > 0 ? recent[i-1][:complexity][:sumesumcc] : 0)
    commit[:complexity][:delta_sumesumcc] = delta
  end

  group_by_author(recent[1..-1])
end

def files_report(files_glob)
  Dir[files_glob].map {|path| complexity_report(path) }
end

def reset_current_repo
  `git checkout master`
end

def prepare_output_folder(folder)
  `mkdir -p #{folder}`
end

def write_json_file(path, data)
  File.open(path, 'w') {|f| f.puts data.to_json }
end

#- - - Main program - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if ARGV.length != 2
  $stderr.puts "Usage: #{File.basename($0)} output_folder files_glob"
  exit 1
end

outdir = ARGV[0]
files_glob = ARGV[1]

COMMITS_FILE_PATH = "#{outdir}/commits.json"
CURRENT_FILES_PATH = "#{outdir}/current_files.json"
RECENT_COMMITS_PATH = "#{outdir}/recent_commits_by_author.json"

reset_current_repo
prepare_output_folder(outdir)

write_json_file(CURRENT_FILES_PATH, files_report(files_glob))

commits = all_commits
update_with_complexity(commits, files_glob)
write_json_file(COMMITS_FILE_PATH, commits)

recent = select_recent_commits(commits)
write_json_file(RECENT_COMMITS_PATH, recent)

$stderr.puts ''
exit 0
